name: Release

on:
  workflow_dispatch:

jobs:
  package:
    runs-on: ubuntu-latest
    outputs:
      buildpacks: ${{ steps.package-all.outputs.buildpacks }}
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install musl-tools
        run: sudo apt-get install musl-tools --no-install-recommends
      - name: Update Rust toolchain
        run: rustup update
      - name: Install Rust linux-musl target
        run: rustup target add x86_64-unknown-linux-musl
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.2.0
      - name: Install yj and crane
        uses: buildpacks/github-actions/setup-tools@v5.2.0
      - name: Install libcnb-cargo
        run: cargo install --git https://github.com/heroku/libcnb.rs --branch ccasey-malax-pairing libcnb-cargo
      - name: Package Buildpacks
        id: package-all
        run: echo "buildpacks='$(cargo libcnb package --release | jq -Rsc '. / "\n" - [""]')'" >> $GITHUB_ENV
      - name: Check output
        run: |
          echo "${{ toJSON(steps.package-all.outputs) }}"
          echo "${{ toJSON('['a', 'b', 'c']') }}"
  publish:
    needs: [package]
    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        buildpack: ${{ fromJSON(needs.package.outputs.buildpacks) }}
    steps:
      - name: Check job output
        run: echo "${{ toJSON(needs.package.outputs) }}"
#      - name: Read buildpack metadata (${{ matrix.buildpack }})
#        run: |
#          echo "buildpack_id=$(yj -t < ${{ matrix.buildpack }}/buildpack.toml | jq -r .buildpack.id)" >> $GITHUB_ENV
#          echo "buildpack_version=$(yj -t < ${{ matrix.buildpack }}/buildpack.toml | jq -r .buildpack.version)" >> $GITHUB_ENV