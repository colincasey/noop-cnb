name: Release

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  detect:
    name: Detect Buildpacks
    runs-on: ubuntu-latest
    outputs:
      buildpacks: ${{ steps.generate-buildpack-matrix.outputs.buildpacks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Buildpack Matrix
        id: generate-buildpack-matrix
        uses: colincasey/languages-github-actions/.github/actions/generate-buildpack-matrix@main

  package:
    needs: [detect]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    name: Package / ${{ matrix.id }}
    steps:
      # Package
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install musl-tools
        run: sudo apt-get install musl-tools --no-install-recommends
      - name: Update Rust toolchain
        run: rustup update
      - name: Install Rust linux-musl target
        run: rustup target add x86_64-unknown-linux-musl
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.2.0
      - name: Install yj and crane
        uses: buildpacks/github-actions/setup-tools@v5.2.0
      - name: Install libcnb-cargo
        run: cargo install --git https://github.com/heroku/libcnb.rs --branch ccasey-malax-pairing libcnb-cargo
      - name: Package Buildpack
        id: libcnb-package
        working-directory: ${{ matrix.path }}
        run: echo "package_dir=$(cargo libcnb package --release)" >> $GITHUB_OUTPUT
      - name: Write buildpack metadata
        id: metadata
        working-directory: ${{ matrix.path }}
        run: |
          export METADATA=./target/buildpack/release/metadata
          echo "id=$(yj -t < buildpack.toml | jq -r .buildpack.id)" >> $METADATA
          echo "version=$(yj -t < buildpack.toml | jq -r .buildpack.version)" >> $METADATA
          echo "repository=$(yj -t < buildpack.toml | jq -r .metadata.release.docker.repository)" >> $METADATA
          echo "path=$(basename ${{ steps.libcnb-package.outputs.package_dir }})" >> $METADATA
          cat $METADATA
      - name: Tar Packaged Buildpack
        run: tar -cvfz ${{ matrix.id }}.tar.gz -C ./target/buildpack/release .
      - name: Upload Buildpack Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.id }}
          path: ${{ matrix.id }}.tar.gz

  publish-docker:
    name: Publish / Docker / ${{ matrix.id }}
    needs: [ detect, package ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.id }}
      - name: Untar Packaged Buildpack
        run: tar -xvf ${{ matrix.id }}.tar.gz
      - name: Load Metadata
        id: metadata
        run: cat metadata >> $GITHUB_OUTPUT
      - name: Check version is unique on Docker Hub
        run: |
          if docker manifest inspect "${{ steps.metadata.outputs.repository }}:${{ steps.metadata.outputs.version }}" > /dev/null; then
            echo "Duplicate version found on Docker Hub ${{ steps.metadata.outputs.repository }}:${{ steps.metadata.outputs.version }}"
            exit 1
          fi
      - name: Publish the buildpack to Docker Hub
        run: echo 'pack buildpack package --path "${{ steps.metadata.outputs.path }}" --publish "${{ steps.metadata.outputs.repository }}:${{ steps.metadata.outputs.version }}"'
#        run: pack buildpack package --path "${{ steps.libcnb-package.outputs.package_dir }}" --publish "${{ steps.publishing.outputs.url }}"

  publish-github:
    name: Publish / GitHub / ${{ matrix.id }}
    needs: [ detect, package ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.id }}
      - name: Untar Packaged Buildpack
        run: tar -xvf ${{ matrix.id }}.tar.gz

  publish-cnb:
    name: Publish / CNB Registry / ${{ matrix.id }}
    needs: [ detect, publish-docker ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.id }}
      - name: Untar Packaged Buildpack
        run: tar -xvf ${{ matrix.id }}.tar.gz

  update-builder:
    name: Update Builder / ${{ matrix.id }}
    needs: [ detect, publish-docker ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.id }}
      - name: Untar Packaged Buildpack
        run: tar -xvf ${{ matrix.id }}.tar.gz
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: heroku/builder
          path: ./builder
      - name: Update Builder
        uses: colincasey/languages-github-actions/.github/actions/update-builder@main
        with:
          path: ./builder
          buildpack-id: heroku/nodejs
          buildpack-version: ${{ steps.metadata.outputs.buildpack_version }}
          buildpack-uri: ${{ steps.publishing.outputs.url }}
          builders: "builder-22,buildpacks-20,builder-classic-22"
      - name: Check
        run: git status
        working-directory: ./builder

#      - name: Read buildpack metadata
#        id: metadata
#        working-directory: ${{ matrix.path }}
#        run: |
#          echo "buildpack_id=$(yj -t < buildpack.toml | jq -r .buildpack.id)" >> "$GITHUB_OUTPUT"
#          echo "buildpack_version=$(yj -t < buildpack.toml | jq -r .buildpack.version)" >> "$GITHUB_OUTPUT"
#          echo "docker_repository=$(yj -t < buildpack.toml | jq -r .metadata.release.docker.repository)" >> "$GITHUB_OUTPUT"
#      - name: Read publish url
#        id: publishing
#        run: |
#          echo "url=${{ steps.metadata.outputs.docker_repository }}:${{ steps.metadata.outputs.buildpack_version }}" >> $GITHUB_OUTPUT
#      - name: Check version is unique on Docker Hub
#        run: |
#          if docker manifest inspect "${{ steps.publishing.outputs.url }}" > /dev/null; then
#            echo "Duplicate version found on Docker Hub ${{ steps.publishing.outputs.url }}"
#            exit 1
#          fi
#      - name: Publish the buildpack to Docker Hub
#        run: echo 'pack buildpack package --path "${{ steps.libcnb-package.outputs.package_dir }}" --publish "${{ steps.publishing.outputs.url }}"'
##        run: pack buildpack package --path "${{ steps.libcnb-package.outputs.package_dir }}" --publish "${{ steps.publishing.outputs.url }}"
##      - name: Calculate the buildpack image digest
##        id: digest
##        run: echo "buildpack_digest=$(crane digest ${{ steps.publishing.outputs.url }})" >> "$GITHUB_OUTPUT"
##      - name: Register the new version with the CNB Buildpack Registry
##        uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:5.0.1
##        with:
##          token: ${{ secrets.CNB_REGISTRY_RELEASE_BOT_GITHUB_TOKEN }}
##          id: ${{ steps.metadata.outputs.buildpack_id }}
##          version: ${{ steps.metadata.outputs.buildpack_version }}
##          address: ${{ env.BUILDPACK_DOCKER_REPO }}@${{ steps.digest.outputs.buildpack_digest }}
##      - name: Create GitHub release
##        uses: actions/create-release@v1
##        env:
##          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##        with:
##          tag_name: v${{ steps.metadata.outputs.buildpack_version }}
##          release_name: v${{ steps.metadata.outputs.buildpack_version }}
##          body: |
##            See the [CHANGELOG](./CHANGELOG.md) for details.
##          draft: false
#
#      # Create Builder PR
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          repository: heroku/builder
#          path: ./builder
#      - name: Update Builder
#        uses: colincasey/languages-github-actions/.github/actions/update-builder@main
#        with:
#          path: ./builder
#          buildpack-id: heroku/nodejs
#          buildpack-version: ${{ steps.metadata.outputs.buildpack_version }}
#          buildpack-uri: ${{ steps.publishing.outputs.url }}
#          builders: "builder-22,buildpacks-20,builder-classic-22"
#      - name: Check
#        run: git status
#        working-directory: ./builder