name: Release

on:
  workflow_dispatch:

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      buildpacks: ${{ steps.generate-buildpack-matrix.outputs.buildpacks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Buildpack Matrix
        id: generate-buildpack-matrix
        uses: colincasey/languages-github-actions/.github/actions/generate-buildpack-matrix@main
  package:
    needs: [detect]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    name: Package ${{ matrix.id }}
    steps:
      # Setup
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install musl-tools
        run: sudo apt-get install musl-tools --no-install-recommends
      - name: Update Rust toolchain
        run: rustup update
      - name: Install Rust linux-musl target
        run: rustup target add x86_64-unknown-linux-musl
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.2.0
      - name: Install yj and crane
        uses: buildpacks/github-actions/setup-tools@v5.2.0
      - name: Install libcnb-cargo
        run: cargo install --git https://github.com/heroku/libcnb.rs --branch ccasey-malax-pairing libcnb-cargo

      # Package
      - name: Package Buildpack
        id: libcnb-package
        working-directory: ${{ matrix.path }}
        run: echo "package_dir=$(cargo libcnb package --release)" >> "$GITHUB_OUTPUT"

      # Publish
      - name: Read buildpack metadata
        id: metadata
        working-directory: ${{ matrix.path }}
        run: |
          echo "buildpack_id=$(yj -t < buildpack.toml | jq -r .buildpack.id)" >> "$GITHUB_OUTPUT"
          
          export buildpack_version=$(yj -t < buildpack.toml | jq -r .buildpack.version)
          echo "${buildpack_version}" >> "$GITHUB_OUTPUT"
          
          export docker_repository=$(yj -t < buildpack.toml | jq -r .metadata.release.docker.repository)
          echo "${docker_repository}" >> "$GITHUB_OUTPUT"
          
          echo "publish_url=${docker_repository}:${buildpack_version}" >> "$GITHUB_OUTPUT"
      - name: Check version is unique on Docker Hub
        run: |
          if docker manifest inspect "${{ steps.metadata.outputs.publish_url }}" > /dev/null; then
            echo "Duplicate version found on Docker Hub ${{ steps.metadata.outputs.publish_url }}"
            exit 1
          fi
      - name: Publish the buildpack to Docker Hub
        run: echo 'pack buildpack package --path "${{ steps.libcnb-package.outputs.package_dir }}" --publish "${{ steps.metadata.outputs.publish_url }}"'
#        run: pack buildpack package --path "${{ steps.libcnb-package.outputs.package_dir }}" --publish "${{ steps.metadata.outputs.publish_url }}"
#      - name: Calculate the buildpack image digest
#        id: digest
#        run: echo "buildpack_digest=$(crane digest ${{ steps.metadata.outputs.publish_url }})" >> "$GITHUB_OUTPUT"
#      - name: Register the new version with the CNB Buildpack Registry
#        uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:5.0.1
#        with:
#          token: ${{ secrets.CNB_REGISTRY_RELEASE_BOT_GITHUB_TOKEN }}
#          id: ${{ steps.metadata.outputs.buildpack_id }}
#          version: ${{ steps.metadata.outputs.buildpack_version }}
#          address: ${{ env.BUILDPACK_DOCKER_REPO }}@${{ steps.digest.outputs.buildpack_digest }}
#      - name: Create GitHub release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ steps.metadata.outputs.buildpack_version }}
#          release_name: v${{ steps.metadata.outputs.buildpack_version }}
#          body: |
#            See the [CHANGELOG](./CHANGELOG.md) for details.
#          draft: false

      # Create Builder PR
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: heroku/builder
          path: ./builder
#      - name: Update Builder
#        run: colincasey/languages-github-actions/.github/actions/update-builder@main
#        working-directory: ${{ env.GITHUB_WORKSPACE }}/builder
#        with:
#          buildpack_id: ${{ steps.metadata.outputs.buildpack_id }}
#          buildpack_version: ${{ steps.metadata.outputs.buildpack_version }}
#          buildpack_uri: ${{ steps.metadata.outputs.publish_url }}
#          builders: "builder-22, builder-20, builder-classic-22"
      - name: Check
        run: git status
        working-directory: ./builder