name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect:
    name: Detecting Buildpacks
    runs-on: ubuntu-latest
    outputs:
      buildpacks: ${{ steps.generate-buildpack-matrix.outputs.buildpacks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # This generate-buildpack-matrix action:
      # - finds all the buildpacks in a repository
      # - produces a json array of { id, path } entries where
      #     id = the buildpack id
      #     path = the directory the buildpack is located
      #
      # This can be set in subsequent jobs using `jobs.<job_id>.strategy.matrix.include`
      # which accepts a list of key/value objects and will create a single job per buildpack.
      # (https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#expanding-or-adding-matrix-configurations)
      - name: Generate Buildpack Matrix
        id: generate-buildpack-matrix
        uses: colincasey/languages-github-actions/.github/actions/generate-buildpack-matrix@main

  package:
    needs: [detect]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    name: Package / ${{ matrix.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install musl-tools
        run: sudo apt-get install musl-tools --no-install-recommends
      - name: Update Rust toolchain
        run: rustup update
      - name: Install Rust linux-musl target
        run: rustup target add x86_64-unknown-linux-musl
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.2.0
      - name: Install yj
        uses: buildpacks/github-actions/setup-tools@v5.2.0
      - name: Install libcnb-cargo
        run: cargo install --git https://github.com/heroku/libcnb.rs --branch ccasey-malax-pairing libcnb-cargo
      - name: Package Buildpack
        id: libcnb-package
        working-directory: ${{ matrix.path }}
        run: echo "dir=$(cargo libcnb package --release)" >> $GITHUB_OUTPUT
      - name: Create CNB File
        run: pack buildpack package ${{ matrix.id }}.cnb --config ${{ steps.libcnb-package.outputs.dir }}/package.toml --format file -v
      - name: Create Docker Image
        run: pack buildpack package ${{ matrix.id }} --config ${{ steps.libcnb-package.outputs.dir }}/package.toml -v
      - name: Save Docker Image
        run: docker save ${{ matrix.id }} | zstd -T0 --long=31 -o ${{ matrix.id }}.tar.zst
      - name: Save Buildpack Variables
        run: |
          echo "version=$(yj -t < ${{ matrix.path }}/buildpack.toml | jq -r .buildpack.version)" >> ./${{ matrix.id }}.vars
          echo "repository=$(yj -t < ${{ matrix.path }}/buildpack.toml | jq -r .metadata.release.docker.repository)" >> ./${{ matrix.id }}.vars
          cat ./${{ matrix.id }}.vars
      - name: Load Buildpack Variables
        id: buildpack
        run: cat ${{ matrix.id }}.vars >> $GITHUB_OUTPUT
      - name: Generate Changelog
        id: generate-changelog
        uses: colincasey/languages-github-actions/.github/actions/generate-changelog@main
        with:
          version: ${{ steps.buildpack.outputs.version }}
      - name: Save Changelog
        run: |
          printf "${{ steps.generate-changelog.outputs.changelog }}"
          printf "${{ steps.generate-changelog.outputs.changelog }}" >> ./${{ matrix.id }}.changes
      - name: Cache Outputs
        uses: actions/cache/save@v3
        with:
          key: ${{ github.run_id }}-${{ matrix.id }}
          path: |
            ${{ matrix.id }}.cnb
            ${{ matrix.id }}.tar.zst
            ${{ matrix.id }}.vars
            ${{ matrix.id }}.changes

  publish-docker:
    name: Publish / Docker / ${{ matrix.id }}
    needs: [ detect, package ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - name: Restore cached assets
        uses: actions/cache/restore@v3
        with:
          key: ${{ github.run_id }}-${{ matrix.id }}
          path: |
            ${{ matrix.id }}.cnb
            ${{ matrix.id }}.tar.zst
            ${{ matrix.id }}.vars
            ${{ matrix.id }}.changes
      - name: Load Buildpack Variables
        id: buildpack
        run: cat ${{ matrix.id }}.vars >> $GITHUB_OUTPUT
      - name: Load Docker images into the Docker daemon
        run: zstd -dc --long=31 ${{ matrix.id }}.tar.zst | docker load
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          registry: docker.io
#          username: ${{ secrets.DOCKER_HUB_USER }}
#          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Check if version is already on Docker Hub
        id: check
        run: echo "published_to_docker=$(docker manifest inspect "${{ steps.buildpack.outputs.repository }}:${{ steps.buildpack.outputs.version }}" &> /dev/null && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
      - name: Tag and publish buildpack
        if: steps.check.outputs.published_to_docker == 'false'
        run: |
          echo "TODO: Echoing these commands until we're sure these steps work"
          echo "docker tag ${{ matrix.id }} ${{ steps.buildpack.outputs.repository }}:${{ steps.buildpack.outputs.version }}"
          echo "docker push ${{ steps.buildpack.outputs.repository }}:${{ steps.buildpack.outputs.version }}"

  publish-github:
    name: Publish / GitHub / ${{ matrix.id }}
    needs: [ detect, package ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - name: Restore cached assets
        uses: actions/cache/restore@v3
        with:
          key: ${{ github.run_id }}-${{ matrix.id }}
          path: |
            ${{ matrix.id }}.cnb
            ${{ matrix.id }}.tar.zst
            ${{ matrix.id }}.vars
            ${{ matrix.id }}.changes
      - name: Load Buildpack Variables
        id: buildpack
        run: cat ${{ matrix.id }}.vars >> $GITHUB_OUTPUT
      - name: Test Changelog
        run: cat ${{ matrix.id }}.changes
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.buildpack.outputs.version }}
          body_path: ${{ matrix.id }}.changes
          files: ${{ matrix.id }}.cnb
          fail_on_unmatched_files: true

  publish-cnb:
    name: Publish / CNB Registry / ${{ matrix.id }}
    needs: [ detect, publish-docker ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - name: Install crane
        uses: buildpacks/github-actions/setup-tools@v5.2.0
      - name: Restore cached assets
        uses: actions/cache/restore@v3
        with:
          key: ${{ github.run_id }}-${{ matrix.id }}
          path: |
            ${{ matrix.id }}.cnb
            ${{ matrix.id }}.tar.zst
            ${{ matrix.id }}.vars
            ${{ matrix.id }}.changes
      - name: Load Buildpack Variables
        id: buildpack
        run: cat ${{ matrix.id }}.vars >> $GITHUB_OUTPUT
      - name: Check if version is already in the registry
        id: check
        run: |
          export URL="https://registry.buildpacks.io/api/v1/buildpacks/${{ matrix.id }}/${{ steps.buildpack.outputs.version }}"
          export EXISTS=$(if [ "$( curl -s -o /dev/null -I -w "%{http_code}" "${URL}")" = "200" ]; then echo 'true'; else echo 'false'; fi)
          echo "published_to_cnb_registry=${EXISTS}" >> $GITHUB_OUTPUT
#      - name: Calculate the buildpack image digest
#        id: digest
#        run: echo "value=$(crane digest ${{ steps.buildpack.outputs.repository }}:${{ steps.buildpack.outputs.version }})" >> "$GITHUB_OUTPUT"
#      - name: Register the new version with the CNB Buildpack Registry
#        if: steps.check.outputs.published_to_cnb_registry == 'false'
#        uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:5.0.1
#        with:
#          token: ${{ secrets.CNB_REGISTRY_RELEASE_BOT_GITHUB_TOKEN }}
#          id: ${{ matrix.id }}
#          version: ${{ steps.buildpack.outputs.version }}
#          address: ${{ steps.buildpack.outputs.repository }}@${{ steps.digest.outputs.value }}

  update-builder:
    name: Update Builder / ${{ matrix.id }}
    needs: [ detect, publish-docker, publish-cnb, publish-github ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect.outputs.buildpacks) }}
    steps:
      - name: Install crane
        uses: buildpacks/github-actions/setup-tools@v5.2.0
      - name: Restore cached assets
        uses: actions/cache/restore@v3
        with:
          key: ${{ github.run_id }}-${{ matrix.id }}
          path: |
            ${{ matrix.id }}.cnb
            ${{ matrix.id }}.tar.zst
            ${{ matrix.id }}.vars
            ${{ matrix.id }}.changes
      - name: Load Buildpack Variables
        id: buildpack
        run: cat ${{ matrix.id }}.vars >> $GITHUB_OUTPUT
#      - name: Calculate the buildpack image digest
#        id: digest
#        run: echo "value=$(crane digest ${{ steps.buildpack.outputs.repository }}:${{ steps.buildpack.outputs.version }})" >> "$GITHUB_OUTPUT"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: heroku/builder
          path: ./builder
      - name: Update Builder
        uses: colincasey/languages-github-actions/.github/actions/update-builder@main
        with:
          path: ./builder
          buildpack_id: ${{ matrix.id }}
          buildpack_version: ${{ steps.buildpack.outputs.version }}
          buildpack_uri: ${{ steps.buildpack.outputs.repository }}@${{ steps.digest.outputs.value }}
          builders: "builder-22,buildpacks-20,builder-classic-22"
#      - name: Create Pull Request
#        id: pr
#        uses: peter-evans/create-pull-request@v5
#        with:
#          path: ./builder
#          delete-branch: true
#          branch: update/${{ github.repository }}/${{ steps.buildpack.outputs.version }}
#          body-path: ../${{ matrix.id }}.changes
#      - name: Configure PR
#        if: steps.pr.outputs.pull-request-operation == 'created'
#        run: gh pr merge --auto --squash --repo heroku/builder "${{ steps.pr.outputs.pull-request-number }}"
